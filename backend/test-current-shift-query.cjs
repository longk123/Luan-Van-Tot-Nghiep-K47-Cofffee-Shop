// Test script: verify getCurrentShiftOrders query v·ªõi logic m·ªõi
// Ch·∫°y: node test-current-shift-query.cjs

const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  database: process.env.DB_NAME || 'pos_db',
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD || 'postgres'
});

async function testQuery() {
  try {
    console.log('üîç Testing getCurrentShiftOrders query...\n');

    // L·∫•y ca hi·ªán t·∫°i ƒëang m·ªü
    const shiftResult = await pool.query(`
      SELECT id, nhan_vien_id, started_at, ended_at, status
      FROM ca_lam
      WHERE status = 'OPEN'
      ORDER BY started_at DESC
      LIMIT 1
    `);

    if (shiftResult.rows.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ ca n√†o ƒëang m·ªü. Vui l√≤ng m·ªü ca tr∆∞·ªõc khi test.');
      return;
    }

    const shift = shiftResult.rows[0];
    console.log('‚úÖ Ca hi·ªán t·∫°i:', {
      id: shift.id,
      nhan_vien_id: shift.nhan_vien_id,
      started_at: shift.started_at,
      ended_at: shift.ended_at,
      status: shift.status
    });
    console.log('');

    // Query m·ªõi - v·ªõi logic: OPEN hi·ªÉn th·ªã t·∫•t c·∫£ ƒë∆°n ch∆∞a thanh to√°n
    const sql = `
      SELECT 
        dh.id,
        dh.trang_thai,
        dh.opened_at,
        dh.closed_at,
        dh.ca_lam_id AS opened_in_shift,
        CASE 
          WHEN dh.trang_thai = 'PAID' THEN 
            CASE 
              WHEN dh.closed_at >= $2 AND dh.closed_at <= COALESCE($3, NOW()) 
              THEN '‚úÖ Thanh to√°n trong ca n√†y'
              ELSE '‚ùå Thanh to√°n ngo√†i ca'
            END
          WHEN dh.trang_thai = 'OPEN' THEN 
            CASE 
              WHEN dh.opened_at <= COALESCE($3, NOW()) 
              THEN '‚úÖ ƒê∆°n OPEN (hi·ªÉn th·ªã v√¨ ch∆∞a thanh to√°n)'
              ELSE '‚ùå M·ªü sau khi ca k·∫øt th√∫c'
            END
          WHEN dh.trang_thai = 'CANCELLED' THEN
            CASE 
              WHEN dh.closed_at >= $2 AND dh.closed_at <= COALESCE($3, NOW())
              THEN '‚úÖ H·ªßy trong ca n√†y'
              ELSE '‚ùå H·ªßy ngo√†i ca'
            END
          ELSE '‚ùì Kh√°c'
        END AS matching_reason
      FROM don_hang dh
      WHERE 
        -- ƒê∆°n ƒë√£ thanh to√°n: l·ªçc theo closed_at
        (dh.trang_thai = 'PAID' 
         AND dh.closed_at >= $2
         AND dh.closed_at <= COALESCE($3, NOW()))
        OR
        -- ƒê∆°n ch∆∞a thanh to√°n: hi·ªÉn th·ªã T·∫§T C·∫¢ ƒë∆°n m·ªü tr∆∞·ªõc ho·∫∑c trong ca
        (dh.trang_thai = 'OPEN' 
         AND dh.opened_at <= COALESCE($3, NOW()))
        OR
        -- ƒê∆°n ƒë√£ h·ªßy: l·ªçc theo closed_at
        (dh.trang_thai = 'CANCELLED'
         AND dh.closed_at >= $2
         AND dh.closed_at <= COALESCE($3, NOW()))
      ORDER BY 
        CASE 
          WHEN dh.trang_thai = 'PAID' THEN dh.closed_at
          WHEN dh.trang_thai = 'CANCELLED' THEN dh.closed_at
          ELSE dh.opened_at
        END DESC
      LIMIT 50
    `;

    const result = await pool.query(sql, [
      shift.id,
      shift.started_at,
      shift.ended_at
    ]);

    console.log(`üìã T√¨m th·∫•y ${result.rows.length} ƒë∆°n h√†ng:\n`);

    result.rows.forEach((order, idx) => {
      console.log(`${idx + 1}. ƒê∆°n #${order.id}:`);
      console.log(`   Tr·∫°ng th√°i: ${order.trang_thai}`);
      console.log(`   M·ªü l√∫c: ${order.opened_at}`);
      console.log(`   ƒê√≥ng l√∫c: ${order.closed_at || 'Ch∆∞a ƒë√≥ng'}`);
      console.log(`   Ca m·ªü ƒë∆°n: ${order.opened_in_shift || 'N/A'}`);
      console.log(`   L√Ω do match: ${order.matching_reason}`);
      console.log('');
    });

    console.log('‚úÖ Test ho√†n t·∫•t!');

  } catch (error) {
    console.error('‚ùå L·ªói:', error.message);
    console.error(error);
  } finally {
    await pool.end();
  }
}

testQuery();
