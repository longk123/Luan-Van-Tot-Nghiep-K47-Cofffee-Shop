/**
 * =====================================================================
 * TEST: FEFO FLOW
 * =====================================================================
 * 
 * Test to√†n b·ªô flow: Nh·∫≠p kho ‚Üí B√°n h√†ng ‚Üí Xu·∫•t kho FEFO
 * 
 * =====================================================================
 */

require('dotenv').config();
const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.DB_HOST || 'localhost',
  port: process.env.DB_PORT || 5432,
  user: process.env.DB_USER || 'postgres',
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME || 'coffee_shop',
});

async function testFEFO() {
  const client = await pool.connect();
  
  try {
    console.log('\n' + '='.repeat(80));
    console.log('üß™ B·∫ÆT ƒê·∫¶U TEST: FEFO FLOW');
    console.log('='.repeat(80) + '\n');
    
    await client.query('BEGIN');
    
    // =====================================================================
    // SETUP: T·∫°o nguy√™n li·ªáu test
    // =====================================================================
    console.log('üìã SETUP: T·∫°o nguy√™n li·ªáu test...');
    
    const { rows: [testIngredient] } = await client.query(`
      INSERT INTO nguyen_lieu (ma, ten, don_vi, ton_kho, gia_nhap_moi_nhat, active)
      VALUES ('TEST-FEFO', 'Test FEFO Ingredient', 'kg', 0, 50000, TRUE)
      ON CONFLICT (ma) DO UPDATE 
      SET ton_kho = 0, active = TRUE
      RETURNING *
    `);
    
    console.log(`   ‚úÖ Nguy√™n li·ªáu: ${testIngredient.ten} (ID: ${testIngredient.id})`);
    
    // X√≥a batch c≈© c·ªßa nguy√™n li·ªáu n√†y
    await client.query('DELETE FROM xuat_kho WHERE nguyen_lieu_id = $1', [testIngredient.id]);
    await client.query('DELETE FROM nhap_kho WHERE nguyen_lieu_id = $1', [testIngredient.id]);
    await client.query('DELETE FROM batch_inventory WHERE nguyen_lieu_id = $1', [testIngredient.id]);
    
    // =====================================================================
    // TEST CASE 1: Nh·∫≠p 3 batch v·ªõi ng√†y h·∫øt h·∫°n kh√°c nhau
    // =====================================================================
    console.log('\nüì¶ TEST CASE 1: Nh·∫≠p 3 batch v·ªõi ng√†y h·∫øt h·∫°n kh√°c nhau');
    
    const today = new Date();
    
    // Batch 1: H·∫øt h·∫°n sau 10 ng√†y (s·∫Ω ƒë∆∞·ª£c xu·∫•t ƒë·∫ßu ti√™n)
    const batch1Date = new Date(today);
    batch1Date.setDate(batch1Date.getDate() + 10);
    
    // Batch 2: H·∫øt h·∫°n sau 30 ng√†y (s·∫Ω ƒë∆∞·ª£c xu·∫•t th·ª© 2)
    const batch2Date = new Date(today);
    batch2Date.setDate(batch2Date.getDate() + 30);
    
    // Batch 3: Kh√¥ng c√≥ h·∫°n s·ª≠ d·ª•ng (s·∫Ω ƒë∆∞·ª£c xu·∫•t cu·ªëi c√πng)
    
    const batches = [
      { quantity: 100, expiryDate: batch1Date, label: 'Batch 1 (HSD: 10 ng√†y)' },
      { quantity: 100, expiryDate: batch2Date, label: 'Batch 2 (HSD: 30 ng√†y)' },
      { quantity: 100, expiryDate: null, label: 'Batch 3 (Kh√¥ng HSD)' }
    ];
    
    const createdBatches = [];
    
    for (const batch of batches) {
      const { rows: [newBatch] } = await client.query(`
        INSERT INTO batch_inventory (
          batch_code,
          nguyen_lieu_id,
          so_luong_nhap,
          so_luong_ton,
          don_vi,
          don_gia,
          ngay_nhap,
          ngay_san_xuat,
          ngay_het_han,
          trang_thai
        )
        SELECT 
          generate_batch_code($1),
          $1,
          $2,
          $2,
          $3,
          50000,
          NOW(),
          CURRENT_DATE - INTERVAL '5 days',
          $4,
          'ACTIVE'
        RETURNING *
      `, [
        testIngredient.id,
        batch.quantity,
        testIngredient.don_vi,
        batch.expiryDate ? batch.expiryDate.toISOString().split('T')[0] : null
      ]);
      
      createdBatches.push({ ...newBatch, label: batch.label });
      console.log(`   ‚úÖ ${batch.label}: ${newBatch.batch_code}`);
    }
    
    // C·∫≠p nh·∫≠t t·ªìn kho
    await client.query(`
      UPDATE nguyen_lieu 
      SET ton_kho = $1 
      WHERE id = $2
    `, [300, testIngredient.id]);
    
    console.log(`   üìä T·ªïng t·ªìn kho: 300 ${testIngredient.don_vi}`);
    
    // =====================================================================
    // TEST CASE 2: Xu·∫•t kho 150 kg theo FEFO
    // =====================================================================
    console.log('\nüîÑ TEST CASE 2: Xu·∫•t kho 150 kg theo FEFO');
    
    const { rows: fefoResult } = await client.query(`
      SELECT * FROM xuat_kho_fefo($1, $2, NULL, NULL, 'BAN_HANG')
    `, [testIngredient.id, 150]);
    
    console.log(`   üì§ Xu·∫•t kho: 150 ${testIngredient.don_vi}`);
    console.log('   üìã Th·ª© t·ª± xu·∫•t kho:');
    
    for (let i = 0; i < fefoResult.length; i++) {
      const result = fefoResult[i];
      const batchInfo = createdBatches.find(b => b.id === result.batch_id);
      console.log(`      ${i + 1}. ${result.batch_code}: ${result.so_luong_xuat} ${testIngredient.don_vi} (${batchInfo.label})`);
    }
    
    // =====================================================================
    // VERIFICATION: Ki·ªÉm tra k·∫øt qu·∫£
    // =====================================================================
    console.log('\n‚úÖ VERIFICATION: Ki·ªÉm tra k·∫øt qu·∫£');
    
    // Ki·ªÉm tra batch 1 (HSD 10 ng√†y) ph·∫£i ƒë∆∞·ª£c xu·∫•t h·∫øt
    const { rows: [batch1After] } = await client.query(
      'SELECT * FROM batch_inventory WHERE id = $1',
      [createdBatches[0].id]
    );
    
    console.log(`   üîç ${createdBatches[0].label}:`);
    console.log(`      - T·ªìn ban ƒë·∫ßu: 100 ${testIngredient.don_vi}`);
    console.log(`      - T·ªìn hi·ªán t·∫°i: ${batch1After.so_luong_ton} ${testIngredient.don_vi}`);
    console.log(`      - Tr·∫°ng th√°i: ${batch1After.trang_thai}`);
    
    if (parseFloat(batch1After.so_luong_ton) === 0 && batch1After.trang_thai === 'DEPLETED') {
      console.log(`      ‚úÖ PASS: Batch 1 ƒë√£ ƒë∆∞·ª£c xu·∫•t h·∫øt`);
    } else {
      console.log(`      ‚ùå FAIL: Batch 1 ch∆∞a ƒë∆∞·ª£c xu·∫•t h·∫øt`);
    }
    
    // Ki·ªÉm tra batch 2 (HSD 30 ng√†y) ph·∫£i ƒë∆∞·ª£c xu·∫•t 50 kg
    const { rows: [batch2After] } = await client.query(
      'SELECT * FROM batch_inventory WHERE id = $1',
      [createdBatches[1].id]
    );
    
    console.log(`   üîç ${createdBatches[1].label}:`);
    console.log(`      - T·ªìn ban ƒë·∫ßu: 100 ${testIngredient.don_vi}`);
    console.log(`      - T·ªìn hi·ªán t·∫°i: ${batch2After.so_luong_ton} ${testIngredient.don_vi}`);
    console.log(`      - Tr·∫°ng th√°i: ${batch2After.trang_thai}`);
    
    if (parseFloat(batch2After.so_luong_ton) === 50 && batch2After.trang_thai === 'ACTIVE') {
      console.log(`      ‚úÖ PASS: Batch 2 ƒë√£ ƒë∆∞·ª£c xu·∫•t 50 kg`);
    } else {
      console.log(`      ‚ùå FAIL: Batch 2 kh√¥ng ƒë√∫ng s·ªë l∆∞·ª£ng`);
    }
    
    // Ki·ªÉm tra batch 3 (Kh√¥ng HSD) kh√¥ng ƒë∆∞·ª£c xu·∫•t
    const { rows: [batch3After] } = await client.query(
      'SELECT * FROM batch_inventory WHERE id = $1',
      [createdBatches[2].id]
    );
    
    console.log(`   üîç ${createdBatches[2].label}:`);
    console.log(`      - T·ªìn ban ƒë·∫ßu: 100 ${testIngredient.don_vi}`);
    console.log(`      - T·ªìn hi·ªán t·∫°i: ${batch3After.so_luong_ton} ${testIngredient.don_vi}`);
    console.log(`      - Tr·∫°ng th√°i: ${batch3After.trang_thai}`);
    
    if (parseFloat(batch3After.so_luong_ton) === 100 && batch3After.trang_thai === 'ACTIVE') {
      console.log(`      ‚úÖ PASS: Batch 3 ch∆∞a ƒë∆∞·ª£c xu·∫•t (ƒë√∫ng)`);
    } else {
      console.log(`      ‚ùå FAIL: Batch 3 kh√¥ng ƒë√∫ng`);
    }
    
    // Ki·ªÉm tra t·ªïng t·ªìn kho
    const { rows: [ingredientAfter] } = await client.query(
      'SELECT ton_kho FROM nguyen_lieu WHERE id = $1',
      [testIngredient.id]
    );
    
    console.log(`   üîç T·ªïng t·ªìn kho:`);
    console.log(`      - Ban ƒë·∫ßu: 300 ${testIngredient.don_vi}`);
    console.log(`      - Hi·ªán t·∫°i: ${ingredientAfter.ton_kho} ${testIngredient.don_vi}`);
    console.log(`      - ƒê√£ xu·∫•t: 150 ${testIngredient.don_vi}`);
    
    // =====================================================================
    // SUMMARY
    // =====================================================================
    console.log('\n' + '='.repeat(80));
    console.log('üìä K·∫æT QU·∫¢ TEST');
    console.log('='.repeat(80));
    
    const allPassed = 
      parseFloat(batch1After.so_luong_ton) === 0 &&
      parseFloat(batch2After.so_luong_ton) === 50 &&
      parseFloat(batch3After.so_luong_ton) === 100;
    
    if (allPassed) {
      console.log('‚úÖ T·∫§T C·∫¢ TEST CASE PASSED!');
      console.log('‚úÖ FEFO logic ho·∫°t ƒë·ªông ƒë√∫ng:');
      console.log('   1. Batch h·∫øt h·∫°n s·ªõm nh·∫•t ƒë∆∞·ª£c xu·∫•t tr∆∞·ªõc');
      console.log('   2. Batch kh√¥ng c√≥ HSD ƒë∆∞·ª£c xu·∫•t sau c√πng');
      console.log('   3. T·ªìn kho ƒë∆∞·ª£c c·∫≠p nh·∫≠t ch√≠nh x√°c');
    } else {
      console.log('‚ùå C√ì TEST CASE FAILED!');
      console.log('‚ùå FEFO logic c√≥ v·∫•n ƒë·ªÅ, c·∫ßn ki·ªÉm tra l·∫°i');
    }
    
    await client.query('ROLLBACK');
    console.log('\nüîÑ ƒê√£ rollback test data\n');
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('\n‚ùå L·ªñI TEST:', error);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

// Ch·∫°y test
if (require.main === module) {
  testFEFO()
    .then(() => {
      console.log('‚úÖ Test completed');
      process.exit(0);
    })
    .catch(err => {
      console.error('‚ùå Test failed:', err);
      process.exit(1);
    });
}

module.exports = { testFEFO };

