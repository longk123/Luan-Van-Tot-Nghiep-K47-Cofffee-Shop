// src/services/reservationsService.js
import reservationsRepo from '../repositories/reservationsRepository.js';
import { BadRequest } from '../utils/httpErrors.js';

class ReservationsService {
  // Validate th·ªùi gian
  validateTimeRange(start_at, end_at) {
    const start = new Date(start_at);
    const end = new Date(end_at);

    if (isNaN(start.getTime()) || isNaN(end.getTime())) {
      throw new BadRequest('Th·ªùi gian kh√¥ng h·ª£p l·ªá');
    }

    if (end <= start) {
      throw new BadRequest('Th·ªùi gian k·∫øt th√∫c ph·∫£i sau th·ªùi gian b·∫Øt ƒë·∫ßu');
    }

    // Ki·ªÉm tra kh√¥ng ƒë∆∞·ª£c ƒë·∫∑t qu√° kh·ª©
    if (start < new Date()) {
      throw new BadRequest('Kh√¥ng th·ªÉ ƒë·∫∑t b√†n trong qu√° kh·ª©');
    }

    // Ki·ªÉm tra kho·∫£ng th·ªùi gian h·ª£p l√Ω (15 ph√∫t - 4 gi·ªù)
    const duration = (end - start) / (1000 * 60); // minutes
    if (duration < 15) {
      throw new BadRequest('Th·ªùi gian ƒë·∫∑t b√†n t·ªëi thi·ªÉu 15 ph√∫t');
    }
    if (duration > 240) {
      throw new BadRequest('Th·ªùi gian ƒë·∫∑t b√†n t·ªëi ƒëa 4 gi·ªù');
    }

    return { start, end, duration };
  }

  // T·∫°o ƒë·∫∑t b√†n m·ªõi
  async createReservation(data) {
    // Validate
    this.validateTimeRange(data.start_at, data.end_at);

    if (!data.so_nguoi || data.so_nguoi < 1) {
      throw new BadRequest('S·ªë ng∆∞·ªùi ph·∫£i l·ªõn h∆°n 0');
    }

    if (!data.so_dien_thoai && !data.khach_hang_id) {
      throw new BadRequest('C·∫ßn c√≥ s·ªë ƒëi·ªán tho·∫°i ho·∫∑c th√¥ng tin kh√°ch h√†ng');
    }

    // N·∫øu c√≥ SƒêT, t√¨m/t·∫°o kh√°ch h√†ng
    let khach_hang_id = data.khach_hang_id;
    if (data.so_dien_thoai && data.ten_khach) {
      const customer = await reservationsRepo.upsertCustomer({
        ten: data.ten_khach,
        so_dien_thoai: data.so_dien_thoai,
        email: data.email,
        ghi_chu: data.ghi_chu_khach
      });
      khach_hang_id = customer.id;
    }

    // T·∫°o ƒë·∫∑t b√†n
    const createData = {
      ...data,
      khach_hang_id
    };
    
    console.log('üîß Service createReservation - data to repository:', createData);
    console.log('khu_vuc_id value:', createData.khu_vuc_id, 'isNaN:', isNaN(createData.khu_vuc_id));
    
    const reservation = await reservationsRepo.create(createData);

    // G√°n b√†n n·∫øu c√≥
    if (data.table_ids && data.table_ids.length > 0) {
      await reservationsRepo.assignTables(reservation.id, data.table_ids);
    }

    return await reservationsRepo.getById(reservation.id);
  }

  // L·∫•y danh s√°ch theo ng√†y
  async getReservationsByDate(date, trang_thai = null) {
    if (!date) {
      throw new BadRequest('Thi·∫øu tham s·ªë date');
    }

    return await reservationsRepo.getByDate(date, trang_thai);
  }

  // L·∫•y chi ti·∫øt
  async getReservationDetail(id) {
    const reservation = await reservationsRepo.getById(id);
    if (!reservation) {
      throw new BadRequest('Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n');
    }
    return reservation;
  }

  // C·∫≠p nh·∫≠t
  async updateReservation(id, data) {
    // Ki·ªÉm tra t·ªìn t·∫°i
    const existing = await reservationsRepo.getById(id);
    if (!existing) {
      throw new BadRequest('Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n');
    }

    // Kh√¥ng cho s·ª≠a n·∫øu ƒë√£ SEATED/COMPLETED/CANCELLED
    if (['SEATED', 'COMPLETED', 'CANCELLED', 'NO_SHOW'].includes(existing.trang_thai)) {
      throw new BadRequest(`Kh√¥ng th·ªÉ s·ª≠a ƒë·∫∑t b√†n ·ªü tr·∫°ng th√°i ${existing.trang_thai}`);
    }

    // Validate th·ªùi gian n·∫øu c√≥ thay ƒë·ªïi
    if (data.start_at || data.end_at) {
      const start = data.start_at || existing.start_at;
      const end = data.end_at || existing.end_at;
      this.validateTimeRange(start, end);
    }

    return await reservationsRepo.update(id, data);
  }

  // G√°n b√†n
  async assignTables(id, table_ids) {
    if (!Array.isArray(table_ids) || table_ids.length === 0) {
      throw new BadRequest('Thi·∫øu danh s√°ch b√†n');
    }

    const reservation = await reservationsRepo.getById(id);
    if (!reservation) {
      throw new BadRequest('Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n');
    }

    // Ki·ªÉm tra b√†n c√≥ tr·ªëng kh√¥ng
    const available = await reservationsRepo.findAvailableTables(
      reservation.start_at,
      reservation.end_at,
      reservation.khu_vuc_id
    );

    const availableIds = available.map(t => t.ban_id);
    const invalidTables = table_ids.filter(id => !availableIds.includes(id));

    if (invalidTables.length > 0) {
      throw new BadRequest(
        `C√°c b√†n sau kh√¥ng kh·∫£ d·ª•ng trong khung gi·ªù n√†y: ${invalidTables.join(', ')}`
      );
    }

    return await reservationsRepo.assignTables(id, table_ids);
  }

  // B·ªè g√°n b√†n
  async unassignTable(id, table_id) {
    const reservation = await reservationsRepo.getById(id);
    if (!reservation) {
      throw new BadRequest('Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n');
    }

    return await reservationsRepo.unassignTable(id, table_id);
  }

  // H·ªßy ƒë·∫∑t b√†n
  async cancelReservation(id, reason = null) {
    const reservation = await reservationsRepo.getById(id);
    if (!reservation) {
      throw new BadRequest('Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n');
    }

    if (['COMPLETED', 'CANCELLED'].includes(reservation.trang_thai)) {
      throw new BadRequest('Kh√¥ng th·ªÉ h·ªßy ƒë·∫∑t b√†n ƒë√£ ho√†n th√†nh ho·∫∑c ƒë√£ h·ªßy');
    }

    return await reservationsRepo.cancel(id, reason);
  }

  // No-show
  async markNoShow(id) {
    const reservation = await reservationsRepo.getById(id);
    if (!reservation) {
      throw new BadRequest('Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n');
    }

    return await reservationsRepo.markNoShow(id);
  }

  // Check-in
  async checkInReservation(id, primary_table_id, created_by) {
    if (!primary_table_id) {
      throw new BadRequest('Thi·∫øu th√¥ng tin b√†n ch√≠nh');
    }

    const reservation = await reservationsRepo.getById(id);
    if (!reservation) {
      throw new BadRequest('Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n');
    }

    if (reservation.trang_thai === 'SEATED') {
      throw new BadRequest('ƒê·∫∑t b√†n ƒë√£ ƒë∆∞·ª£c check-in');
    }

    if (!['PENDING', 'CONFIRMED'].includes(reservation.trang_thai)) {
      throw new BadRequest('Ch·ªâ c√≥ th·ªÉ check-in ƒë·∫∑t b√†n ·ªü tr·∫°ng th√°i PENDING ho·∫∑c CONFIRMED');
    }

    // Ki·ªÉm tra b√†n c√≥ trong danh s√°ch ƒë·∫∑t kh√¥ng
    const hasTable = reservation.tables.some(t => t.ban_id === primary_table_id);
    if (!hasTable) {
      throw new BadRequest('B√†n n√†y kh√¥ng thu·ªôc ƒë·∫∑t ch·ªó');
    }

    return await reservationsRepo.checkIn(id, primary_table_id, created_by);
  }

  // Ho√†n th√†nh
  async completeReservation(id) {
    const reservation = await reservationsRepo.getById(id);
    if (!reservation) {
      throw new BadRequest('Kh√¥ng t√¨m th·∫•y ƒë·∫∑t b√†n');
    }

    return await reservationsRepo.complete(id);
  }

  // T√¨m b√†n tr·ªëng
  async searchAvailableTables(start_at, end_at, khu_vuc_id = null) {
    this.validateTimeRange(start_at, end_at);
    return await reservationsRepo.findAvailableTables(start_at, end_at, khu_vuc_id);
  }

  // L·∫•y ƒë·∫∑t b√†n s·∫Øp t·ªõi c·ªßa b√†n
  async getUpcomingForTable(ban_id, within_minutes = 60) {
    return await reservationsRepo.getUpcomingForTable(ban_id, within_minutes);
  }
}

export default new ReservationsService();

