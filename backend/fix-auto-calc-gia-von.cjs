/**
 * FIX: Th√™m trigger t·ª± ƒë·ªông t√≠nh gi√° v·ªën khi INSERT/UPDATE don_hang_chi_tiet
 */

require('dotenv').config({ path: require('path').join(__dirname, '.env') });
const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: String(process.env.DB_PASSWORD)
});

async function fix() {
  console.log('\nüîß FIX: Th√™m trigger t√≠nh gi√° v·ªën t·ª± ƒë·ªông');
  console.log('='.repeat(70));
  console.log();
  
  const client = await pool.connect();
  
  try {
    await client.query('BEGIN');
    
    // 1. T·∫°o function trigger t√≠nh gi√° v·ªën
    console.log('1Ô∏è‚É£ T·∫°o function trigger_calc_gia_von...');
    await client.query(`
      CREATE OR REPLACE FUNCTION trigger_calc_gia_von()
      RETURNS TRIGGER
      LANGUAGE plpgsql
      AS $$
      DECLARE
        v_gia_von DECIMAL(10,2);
        v_duong_percent DECIMAL(5,2) := 1.0;
        v_da_percent DECIMAL(5,2) := 1.0;
      BEGIN
        -- L·∫•y % ƒë∆∞·ªùng v√† ƒë√° t·ª´ tuy_chon
        SELECT 
          COALESCE(MAX(CASE 
            WHEN tm.ma LIKE '%DUONG%' OR tm.ten ILIKE '%ƒë∆∞·ªùng%' THEN
              CASE 
                WHEN tm.ten ILIKE '%50%' OR tm.ten ILIKE '%√≠t%' THEN 0.5
                WHEN tm.ten ILIKE '%75%' THEN 0.75
                WHEN tm.ten ILIKE '%150%' OR tm.ten ILIKE '%nhi·ªÅu%' THEN 1.5
                ELSE 1.0
              END
          END), 1.0),
          COALESCE(MAX(CASE 
            WHEN tm.ma LIKE '%DA%' OR tm.ten ILIKE '%ƒë√°%' THEN
              CASE 
                WHEN tm.ten ILIKE '%50%' OR tm.ten ILIKE '%√≠t%' THEN 0.5
                WHEN tm.ten ILIKE '%nhi·ªÅu%' THEN 1.5
                ELSE 1.0
              END
          END), 1.0)
        INTO v_duong_percent, v_da_percent
        FROM don_hang_chi_tiet_tuy_chon dhctto
        LEFT JOIN tuy_chon_mon tm ON tm.id = dhctto.tuy_chon_id
        WHERE dhctto.line_id = NEW.id;
        
        -- T√≠nh gi√° v·ªën t·ª´ c√¥ng th·ª©c
        SELECT 
          COALESCE(SUM(
            ct.so_luong * nl.gia_nhap_moi_nhat * 
            CASE 
              WHEN nl.ma LIKE '%DUONG%' THEN v_duong_percent
              WHEN nl.ma LIKE '%DA%' THEN v_da_percent
              ELSE 1.0
            END
          ), 0)
        INTO v_gia_von
        FROM cong_thuc_mon ct
        JOIN nguyen_lieu nl ON nl.id = ct.nguyen_lieu_id
        WHERE ct.mon_id = NEW.mon_id
          AND (ct.bien_the_id = NEW.bien_the_id OR ct.bien_the_id IS NULL);
        
        -- Set gi√° v·ªën
        NEW.gia_von_thuc_te := v_gia_von;
        
        RETURN NEW;
      END;
      $$;
    `);
    console.log('   ‚úÖ Function created\n');
    
    // 2. T·∫°o trigger cho INSERT
    console.log('2Ô∏è‚É£ T·∫°o trigger trg_calc_gia_von_insert...');
    await client.query(`
      DROP TRIGGER IF EXISTS trg_calc_gia_von_insert ON don_hang_chi_tiet;
      
      CREATE TRIGGER trg_calc_gia_von_insert
      BEFORE INSERT ON don_hang_chi_tiet
      FOR EACH ROW
      EXECUTE FUNCTION trigger_calc_gia_von();
    `);
    console.log('   ‚úÖ INSERT trigger created\n');
    
    // 3. T·∫°o trigger cho UPDATE
    console.log('3Ô∏è‚É£ T·∫°o trigger trg_calc_gia_von_update...');
    await client.query(`
      DROP TRIGGER IF EXISTS trg_calc_gia_von_update ON don_hang_chi_tiet;
      
      CREATE TRIGGER trg_calc_gia_von_update
      BEFORE UPDATE OF mon_id, bien_the_id, so_luong ON don_hang_chi_tiet
      FOR EACH ROW
      WHEN (OLD.mon_id IS DISTINCT FROM NEW.mon_id 
         OR OLD.bien_the_id IS DISTINCT FROM NEW.bien_the_id
         OR OLD.so_luong IS DISTINCT FROM NEW.so_luong)
      EXECUTE FUNCTION trigger_calc_gia_von();
    `);
    console.log('   ‚úÖ UPDATE trigger created\n');
    
    // 4. Trigger khi th√™m/s·ª≠a topping
    console.log('4Ô∏è‚É£ T·∫°o trigger update gi√° v·ªën khi thay ƒë·ªïi topping...');
    await client.query(`
      CREATE OR REPLACE FUNCTION trigger_update_gia_von_when_topping_changed()
      RETURNS TRIGGER
      LANGUAGE plpgsql
      AS $$
      DECLARE
        v_line_id INT;
      BEGIN
        -- L·∫•y line_id
        IF TG_OP = 'DELETE' THEN
          v_line_id := OLD.line_id;
        ELSE
          v_line_id := NEW.line_id;
        END IF;
        
        -- Trigger recalc gi√° v·ªën cho line n√†y
        UPDATE don_hang_chi_tiet
        SET so_luong = so_luong  -- Dummy update ƒë·ªÉ trigger fire
        WHERE id = v_line_id;
        
        RETURN COALESCE(NEW, OLD);
      END;
      $$;
    `);
    
    await client.query(`
      DROP TRIGGER IF EXISTS trg_topping_update_gia_von ON don_hang_chi_tiet_tuy_chon;
      
      CREATE TRIGGER trg_topping_update_gia_von
      AFTER INSERT OR UPDATE OR DELETE ON don_hang_chi_tiet_tuy_chon
      FOR EACH ROW
      EXECUTE FUNCTION trigger_update_gia_von_when_topping_changed();
    `);
    console.log('   ‚úÖ Topping trigger created\n');
    
    // 5. Update gi√° v·ªën cho c√°c ƒë∆°n h√†ng hi·ªán c√≥
    console.log('5Ô∏è‚É£ C·∫≠p nh·∫≠t gi√° v·ªën cho c√°c ƒë∆°n h√†ng hi·ªán c√≥...');
    const updateResult = await client.query(`
      UPDATE don_hang_chi_tiet dhct
      SET gia_von_thuc_te = (
        SELECT 
          COALESCE(SUM(
            ct.so_luong * nl.gia_nhap_moi_nhat * 
            CASE 
              WHEN nl.ma LIKE '%DUONG%' THEN 
                COALESCE((
                  SELECT MAX(CASE 
                    WHEN tm.ten ILIKE '%50%' OR tm.ten ILIKE '%√≠t%' THEN 0.5
                    WHEN tm.ten ILIKE '%75%' THEN 0.75
                    WHEN tm.ten ILIKE '%150%' OR tm.ten ILIKE '%nhi·ªÅu%' THEN 1.5
                    ELSE 1.0
                  END)
                  FROM don_hang_chi_tiet_tuy_chon dhctto
                  JOIN tuy_chon_mon tm ON tm.id = dhctto.tuy_chon_id
                  WHERE dhctto.line_id = dhct.id 
                    AND (tm.ma LIKE '%DUONG%' OR tm.ten ILIKE '%ƒë∆∞·ªùng%')
                ), 1.0)
              WHEN nl.ma LIKE '%DA%' THEN 
                COALESCE((
                  SELECT MAX(CASE 
                    WHEN tm.ten ILIKE '%50%' OR tm.ten ILIKE '%√≠t%' THEN 0.5
                    WHEN tm.ten ILIKE '%nhi·ªÅu%' THEN 1.5
                    ELSE 1.0
                  END)
                  FROM don_hang_chi_tiet_tuy_chon dhctto
                  JOIN tuy_chon_mon tm ON tm.id = dhctto.tuy_chon_id
                  WHERE dhctto.line_id = dhct.id 
                    AND (tm.ma LIKE '%DA%' OR tm.ten ILIKE '%ƒë√°%')
                ), 1.0)
              ELSE 1.0
            END
          ), 0)
        FROM cong_thuc_mon ct
        JOIN nguyen_lieu nl ON nl.id = ct.nguyen_lieu_id
        WHERE ct.mon_id = dhct.mon_id
          AND (ct.bien_the_id = dhct.bien_the_id OR ct.bien_the_id IS NULL)
      )
      WHERE gia_von_thuc_te IS NULL OR gia_von_thuc_te = 0
    `);
    console.log(`   ‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${updateResult.rowCount} d√≤ng\n`);
    
    await client.query('COMMIT');
    
    console.log('='.repeat(70));
    console.log('‚úÖ FIX HO√ÄN T·∫§T!');
    console.log('='.repeat(70));
    console.log('\nüìù ƒê√É T·∫†O:');
    console.log('  1. Function trigger_calc_gia_von() - T√≠nh gi√° v·ªën t·ª± ƒë·ªông');
    console.log('  2. Trigger trg_calc_gia_von_insert - T√≠nh khi INSERT');
    console.log('  3. Trigger trg_calc_gia_von_update - T√≠nh khi UPDATE');
    console.log('  4. Trigger trg_topping_update_gia_von - T√≠nh l·∫°i khi ƒë·ªïi topping');
    console.log(`  5. ƒê√£ c·∫≠p nh·∫≠t gi√° v·ªën cho ${updateResult.rowCount} ƒë∆°n h√†ng c≈©`);
    console.log('\nüí° T·ª´ gi·ªù m·ªçi ƒë∆°n h√†ng m·ªõi s·∫Ω t·ª± ƒë·ªông c√≥ gi√° v·ªën!\n');
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('\n‚ùå L·ªñI:', error.message);
    console.error(error.stack);
    throw error;
  } finally {
    client.release();
    await pool.end();
  }
}

fix();
