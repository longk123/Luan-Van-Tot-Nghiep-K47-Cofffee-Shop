/**
 * TEST: T·∫°o ƒë∆°n h√†ng c√≥ topping v√† ki·ªÉm tra gi√° v·ªën
 */

require('dotenv').config({ path: require('path').join(__dirname, '.env') });
const axios = require('axios');
const { Pool } = require('pg');

const pool = new Pool({
  host: process.env.DB_HOST,
  port: process.env.DB_PORT,
  database: process.env.DB_NAME,
  user: process.env.DB_USER,
  password: String(process.env.DB_PASSWORD)
});

const BASE_URL = 'http://localhost:5000/api/v1';

async function test() {
  console.log('\nüß™ TEST: ƒê∆°n h√†ng c√≥ topping');
  console.log('='.repeat(70));
  console.log();
  
  try {
    // 1. Login ƒë·ªÉ l·∫•y token
    console.log('1Ô∏è‚É£ ƒêƒÉng nh·∫≠p...');
    const loginRes = await axios.post(`${BASE_URL}/auth/login`, {
      username: 'admin',
      password: '123456'
    });
    const token = loginRes.data.token;
    const config = { headers: { 'Authorization': `Bearer ${token}` } };
    console.log('   ‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng\n');
    
    // 2. L·∫•y th√¥ng tin m√≥n v√† topping
    console.log('2Ô∏è‚É£ L·∫•y th√¥ng tin m√≥n v√† topping...');
    const client = await pool.connect();
    
    try {
      const caPheSua = await client.query(`
        SELECT m.id as mon_id, mbt.id as bien_the_id, mbt.gia
        FROM mon m
        JOIN mon_bien_the mbt ON mbt.mon_id = m.id
        WHERE m.ten = 'C√† ph√™ s·ªØa' AND mbt.ten_bien_the = 'M' AND m.active = TRUE
        LIMIT 1
      `);
      
      const topping = await client.query(`
        SELECT 
          tc.id as topping_id,
          tc.ten,
          tc.gia_mac_dinh as gia_ban,
          tc.nguyen_lieu_id,
          nl.gia_nhap_moi_nhat as gia_von
        FROM tuy_chon_mon tc
        LEFT JOIN nguyen_lieu nl ON nl.id = tc.nguyen_lieu_id
        WHERE tc.loai = 'AMOUNT'
        ORDER BY tc.id
        LIMIT 1
      `);
      
      if (!caPheSua.rows[0] || !topping.rows[0]) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y m√≥n ho·∫∑c topping');
        return;
      }
      
      console.log(`   M√≥n: C√† ph√™ s·ªØa M - ${caPheSua.rows[0].gia}ƒë`);
      console.log(`   Topping: ${topping.rows[0].ten} - B√°n: ${topping.rows[0].gia_ban}ƒë, V·ªën: ${topping.rows[0].gia_von || 0}ƒë\n`);
      
      // 3. T·∫°o ƒë∆°n h√†ng qua API
      console.log('3Ô∏è‚É£ T·∫°o ƒë∆°n h√†ng qua API...');
      const orderData = {
        ban_id: null,
        loai_don: 'mang_di',
        items: [
          {
            mon_id: caPheSua.rows[0].mon_id,
            bien_the_id: caPheSua.rows[0].bien_the_id,
            so_luong: 1,
            tuy_chon: [
              {
                tuy_chon_id: topping.rows[0].topping_id,
                so_luong: 1
              }
            ]
          }
        ]
      };
      
      const orderRes = await axios.post(`${BASE_URL}/orders`, orderData, config);
      const orderId = orderRes.data.order_id;
      console.log(`   ‚úÖ ƒê∆°n h√†ng #${orderId}\n`);
      
      // 4. Thanh to√°n ƒë∆°n
      console.log('4Ô∏è‚É£ Thanh to√°n ƒë∆°n h√†ng...');
      await axios.post(`${BASE_URL}/orders/${orderId}/pay`, {
        phuong_thuc: 'tien_mat',
        so_tien_nhan: 50000
      }, config);
      console.log(`   ‚úÖ ƒê√£ thanh to√°n\n`);
      
      // 5. Ki·ªÉm tra k·∫øt qu·∫£
      console.log('5Ô∏è‚É£ KI·ªÇM TRA K·∫æT QU·∫¢:');
      console.log('='.repeat(70));
      
      // T·ª´ view v_profit_with_topping_cost
      const profit = await client.query(`
        SELECT * FROM v_profit_with_topping_cost WHERE order_id = $1
      `, [orderId]);
      
      if (profit.rows.length > 0) {
        const p = profit.rows[0];
        console.log('\nüí∞ B√ÅO C√ÅO ƒê∆†N H√ÄNG:');
        console.log(`   Doanh thu: ${p.doanh_thu}ƒë`);
        console.log(`   Gi√° v·ªën m√≥n: ${p.gia_von_mon}ƒë`);
        console.log(`   Gi√° v·ªën topping: ${p.gia_von_topping}ƒë`);
        console.log(`   T·ªïng gi√° v·ªën: ${p.tong_gia_von}ƒë`);
        console.log(`   L·ª£i nhu·∫≠n: ${p.loi_nhuan}ƒë`);
        
        console.log('\nüîç PH√ÇN T√çCH:');
        const expectedRevenue = caPheSua.rows[0].gia + topping.rows[0].gia_ban;
        const expectedCost = await client.query(`
          SELECT COALESCE(gia_von_thuc_te, 0) as gia_von_mon
          FROM don_hang_chi_tiet
          WHERE don_hang_id = $1
          LIMIT 1
        `, [orderId]);
        
        const giaVonMon = parseFloat(expectedCost.rows[0].gia_von_mon);
        const giaVonTopping = topping.rows[0].gia_von || 0;
        
        console.log(`   Gi√° b√°n m√≥n: ${caPheSua.rows[0].gia}ƒë`);
        console.log(`   Gi√° b√°n topping: ${topping.rows[0].gia_ban}ƒë`);
        console.log(`   T·ªïng doanh thu (t√≠nh): ${expectedRevenue}ƒë`);
        console.log(`   T·ªïng doanh thu (th·ª±c t·∫ø): ${p.doanh_thu}ƒë`);
        
        console.log(`\n   Gi√° v·ªën m√≥n (t√≠nh): ${giaVonMon}ƒë`);
        console.log(`   Gi√° v·ªën topping (t√≠nh): ${giaVonTopping}ƒë`);
        console.log(`   T·ªïng gi√° v·ªën (t√≠nh): ${giaVonMon + giaVonTopping}ƒë`);
        console.log(`   T·ªïng gi√° v·ªën (th·ª±c t·∫ø): ${p.tong_gia_von}ƒë`);
        
        console.log('\n‚úÖ K·∫æT LU·∫¨N:');
        if (parseInt(p.gia_von_topping) === parseInt(giaVonTopping)) {
          console.log('   ‚úÖ Topping ƒê√É ƒê∆Ø·ª¢C t√≠nh v√†o gi√° v·ªën CH√çNH X√ÅC!');
          console.log('   ‚úÖ B√°o c√°o l·ª£i nhu·∫≠n CH√çNH X√ÅC!');
        } else if (p.gia_von_topping > 0) {
          console.log('   ‚ö†Ô∏è  Topping ƒë∆∞·ª£c t√≠nh v√†o gi√° v·ªën nh∆∞ng gi√° tr·ªã kh√°c d·ª± ki·∫øn');
        } else {
          console.log('   ‚ö†Ô∏è  Topping CH∆ØA ƒë∆∞·ª£c t√≠nh v√†o gi√° v·ªën');
          console.log('   üí° C√≥ th·ªÉ topping ch∆∞a link v·ªõi nguy√™n li·ªáu');
        }
      } else {
        console.log('\n‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t·ª´ view v_profit_with_topping_cost');
      }
      
      console.log('\n' + '='.repeat(70));
      console.log(`‚úÖ TEST HO√ÄN T·∫§T - ƒê∆°n h√†ng #${orderId}`);
      console.log('='.repeat(70) + '\n');
      
    } finally {
      client.release();
    }
    
  } catch (error) {
    console.error('\n‚ùå L·ªñI:', error.response?.data || error.message);
    if (error.response) {
      console.error('Status:', error.response.status);
    }
  } finally {
    await pool.end();
  }
}

test();
